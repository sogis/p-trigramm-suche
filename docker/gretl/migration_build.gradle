import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet 

//defaultTasks 'createIdx'
//defaultTasks 'loadFeatures'
//defaultTasks 'loadAllFeatures' //task aggregation

def dbHost = 'geodb.rootso.org'
def dbPub = ['jdbc:postgresql://' + dbHost +'/pub', 'user', 'pwd']
def dbSearch = ['jdbc:postgresql://search-db/search', 'ddluser', 'ddluser']
def dbSearchSchema = 'agi_suchindex_v1_task'

//--------------------
// SCHEMA

task dropSchema(type: SqlExecutor){
    sqlParameters = [db_schema:dbSearchSchema]
    database = dbSearch
    sqlFiles = ['schema/schema_drop.sql']
}

task createSchema(type: Ili2pgImportSchema, dependsOn: dropSchema){
    database = dbSearch
    models = "SO_AGI_Suchindex_20240806"
    dbschema = dbSearchSchema
    modeldir = "$projectDir/schema"
    createscript = "$projectDir/schema/iliCreateSchema.sql"
}

task createIdx(type: SqlExecutor, dependsOn: createSchema){
    database = dbSearch
    sqlParameters = [
        db_schema:dbSearchSchema]
    sqlFiles = ['schema/schema_idx.sql']
}

//--------------------
// DATA Task Aggregations , 1. all deletes, 2. all inserts

task deleteAllFeatures {
    dependsOn tasks.matching { it.name.startsWith('deleteFeatures') }

    doLast {
        println("### LOG: All deleteFeatures tasks executed.")
    }
}

task loadAllFeatures (dependsOn: deleteAllFeatures){
    dependsOn tasks.matching { it.name.startsWith('loadFeatures') }

    doLast {
        println("### LOG: All loadFeatures tasks executed.")
    }
}

//--------------------
//--------------------
// DATA

def loadFeaturesTasks = []
def layerNames = []

layerNames << 'ch.so.afu.abbaustellen'

layerNames << 'ch.so.afu.altlasten.standorte'
layerNames << 'ch.so.afu.altlasten.standorte_geschuetzt'

layerNames << 'ch.so.ada.archaeologie.flaechenfundstellen'
layerNames << 'ch.so.ada.archaeologie.flaechenfundstellen_geschuetzt'
layerNames << 'ch.so.ada.archaeologie.punktfundstellen'
layerNames << 'ch.so.ada.archaeologie.punktfundstellen_geschuetzt'

layerNames << 'ch.so.afu.asiatische_hornisse'

layerNames << 'ch.so.afu.bodeninformationen.bodenprofilstandorte'

layerNames << 'ch.so.afu.fliessgewaesser.netz'

layerNames << 'ch.so.afu.geotope.aufschluss'
layerNames << 'ch.so.afu.geotope.erratiker'
layerNames << 'ch.so.afu.geotope.fundstelle_grabung_geschuetzt'
layerNames << 'ch.so.afu.geotope.hoehle'
layerNames << 'ch.so.afu.geotope.landschaftsform'
layerNames << 'ch.so.afu.geotope.quelle'

layerNames << 'ch.so.afu.gewaesserschutz_lw.stall'
layerNames << 'ch.so.afu.gewaesserschutz_lw.standort_mit_erhebung'
layerNames << 'ch.so.afu.gewaesserschutz_lw.standort_ohne_erhebung'

layerNames << 'ch.so.afu.wasserbewirtschaftung.fassung'
layerNames << 'ch.so.afu.wasserbewirtschaftung.fassung_geschuetzt'
layerNames << 'ch.so.afu.wasserbewirtschaftung.grundwasserwaermenutzung'
layerNames << 'ch.so.afu.wasserbewirtschaftung.grundwasserwaermenutzung_geschuetzt'
layerNames << 'ch.so.afu.wasserbewirtschaftung.quellen'
////layerNames << 'ch.so.afu.gewaesserschutz_quellen' //?! Kopie von 'ch.so.afu.wasserbewirtschaftung.quellen'
layerNames << 'ch.so.afu.wasserbewirtschaftung.quellen_geschuetzt'
layerNames << 'ch.so.afu.wasserbewirtschaftung.sondierung'
layerNames << 'ch.so.afu.wasserbewirtschaftung.sondierung_geschuetzt'
layerNames << 'ch.so.afu.wasserbewirtschaftung.trinkwasserversorgung_geschuetzt'
layerNames << 'ch.so.afu.wasserbewirtschaftung.versickerungsschacht'
layerNames << 'ch.so.afu.wasserbewirtschaftung.versickerungsschacht_geschuetzt'
layerNames << 'ch.so.afu.wasserbewirtschaftung.weitere_einbauten_geschuetzt'

layerNames << 'ch.so.afu.naturereigniskataster.basisinformation'
layerNames << 'ch.afu.naturereigniskataster.prozessraum.sturz'
layerNames << 'ch.afu.naturereigniskataster.prozessraum.wasser'

layerNames << 'ch.so.agi.av.bodenbedeckung'
layerNames << 'ch.so.agi.av.gebaeudeadressen.gebaeudeeingaenge'
layerNames << 'ch.so.agi.av.grundstuecke.projektierte'
layerNames << 'ch.so.agi.av.grundstuecke.rechtskraeftig'

//layerNames = []
//layerNames << ''



//---------------
// DATA TASKS

layerNames.each { layerNamen ->

    task "deleteFeatures_${layerNamen}"(type: SqlExecutor){
        database = dbSearch
        String layerNameString = "'${layerNamen}'"
        sqlParameters = [
                            [layername: layerNameString, db_schema: dbSearchSchema]       
                        ]    
        sqlFiles = ['migration/deleteLayerFeatures.sql']
    }

    def loadTask = task "loadFeatures_${layerNamen}"(type: Db2Db, dependsOn: "deleteFeatures_${layerNamen}"){ 
        sourceDb = dbPub
        targetDb = dbSearch
        transferSets = [
            new TransferSet('migration/' + layerNamen +'.sql', dbSearchSchema + '.feature', false)
        ];
    }

    loadFeaturesTasks << loadTask
}
defaultTasks (*loadFeaturesTasks.collect { it.name })
